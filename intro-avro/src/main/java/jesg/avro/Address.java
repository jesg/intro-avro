/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** An Address has a street, state, city, and zip code */
@org.apache.avro.specific.AvroGenerated
public class Address extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Address\",\"namespace\":\"jesg.avro\",\"doc\":\"An Address has a street, state, city, and zip code\",\"fields\":[{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"street\",\"type\":\"string\",\"order\":\"ignore\"},{\"name\":\"zipcode\",\"type\":\"string\",\"order\":\"ignore\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence state;
   private java.lang.CharSequence city;
   private java.lang.CharSequence street;
   private java.lang.CharSequence zipcode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Address() {}

  /**
   * All-args constructor.
   */
  public Address(java.lang.CharSequence state, java.lang.CharSequence city, java.lang.CharSequence street, java.lang.CharSequence zipcode) {
    this.state = state;
    this.city = city;
    this.street = street;
    this.zipcode = zipcode;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return state;
    case 1: return city;
    case 2: return street;
    case 3: return zipcode;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: state = (java.lang.CharSequence)value$; break;
    case 1: city = (java.lang.CharSequence)value$; break;
    case 2: street = (java.lang.CharSequence)value$; break;
    case 3: zipcode = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'state' field.
   */
  public java.lang.CharSequence getState() {
    return state;
  }

  /**
   * Sets the value of the 'state' field.
   * @param value the value to set.
   */
  public void setState(java.lang.CharSequence value) {
    this.state = value;
  }

  /**
   * Gets the value of the 'city' field.
   */
  public java.lang.CharSequence getCity() {
    return city;
  }

  /**
   * Sets the value of the 'city' field.
   * @param value the value to set.
   */
  public void setCity(java.lang.CharSequence value) {
    this.city = value;
  }

  /**
   * Gets the value of the 'street' field.
   */
  public java.lang.CharSequence getStreet() {
    return street;
  }

  /**
   * Sets the value of the 'street' field.
   * @param value the value to set.
   */
  public void setStreet(java.lang.CharSequence value) {
    this.street = value;
  }

  /**
   * Gets the value of the 'zipcode' field.
   */
  public java.lang.CharSequence getZipcode() {
    return zipcode;
  }

  /**
   * Sets the value of the 'zipcode' field.
   * @param value the value to set.
   */
  public void setZipcode(java.lang.CharSequence value) {
    this.zipcode = value;
  }

  /** Creates a new Address RecordBuilder */
  public static jesg.avro.Address.Builder newBuilder() {
    return new jesg.avro.Address.Builder();
  }
  
  /** Creates a new Address RecordBuilder by copying an existing Builder */
  public static jesg.avro.Address.Builder newBuilder(jesg.avro.Address.Builder other) {
    return new jesg.avro.Address.Builder(other);
  }
  
  /** Creates a new Address RecordBuilder by copying an existing Address instance */
  public static jesg.avro.Address.Builder newBuilder(jesg.avro.Address other) {
    return new jesg.avro.Address.Builder(other);
  }
  
  /**
   * RecordBuilder for Address instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Address>
    implements org.apache.avro.data.RecordBuilder<Address> {

    private java.lang.CharSequence state;
    private java.lang.CharSequence city;
    private java.lang.CharSequence street;
    private java.lang.CharSequence zipcode;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.Address.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.Address.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Address instance */
    private Builder(jesg.avro.Address other) {
            super(jesg.avro.Address.SCHEMA$);
      if (isValidValue(fields()[0], other.state)) {
        this.state = data().deepCopy(fields()[0].schema(), other.state);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.street)) {
        this.street = data().deepCopy(fields()[2].schema(), other.street);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.zipcode)) {
        this.zipcode = data().deepCopy(fields()[3].schema(), other.zipcode);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'state' field */
    public java.lang.CharSequence getState() {
      return state;
    }
    
    /** Sets the value of the 'state' field */
    public jesg.avro.Address.Builder setState(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.state = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'state' field has been set */
    public boolean hasState() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'state' field */
    public jesg.avro.Address.Builder clearState() {
      state = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'city' field */
    public java.lang.CharSequence getCity() {
      return city;
    }
    
    /** Sets the value of the 'city' field */
    public jesg.avro.Address.Builder setCity(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'city' field has been set */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'city' field */
    public jesg.avro.Address.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'street' field */
    public java.lang.CharSequence getStreet() {
      return street;
    }
    
    /** Sets the value of the 'street' field */
    public jesg.avro.Address.Builder setStreet(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.street = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'street' field has been set */
    public boolean hasStreet() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'street' field */
    public jesg.avro.Address.Builder clearStreet() {
      street = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'zipcode' field */
    public java.lang.CharSequence getZipcode() {
      return zipcode;
    }
    
    /** Sets the value of the 'zipcode' field */
    public jesg.avro.Address.Builder setZipcode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.zipcode = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'zipcode' field has been set */
    public boolean hasZipcode() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'zipcode' field */
    public jesg.avro.Address.Builder clearZipcode() {
      zipcode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    public Address build() {
      try {
        Address record = new Address();
        record.state = fieldSetFlags()[0] ? this.state : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.street = fieldSetFlags()[2] ? this.street : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.zipcode = fieldSetFlags()[3] ? this.zipcode : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
