/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package jesg.avro;  
@SuppressWarnings("all")
/** A person has a name, phone number, and an address. */
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"jesg.avro\",\"doc\":\"A person has a name, phone number, and an address.\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"phonenumber\",\"type\":\"string\",\"order\":\"ignore\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"doc\":\"An Address has a street, state, city, and zip code\",\"fields\":[{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"street\",\"type\":\"string\",\"order\":\"ignore\"},{\"name\":\"zipcode\",\"type\":\"string\",\"order\":\"ignore\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
   private java.lang.CharSequence name;
   private java.lang.CharSequence phonenumber;
   private jesg.avro.Address address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use {@link \#newBuilder()}. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence name, java.lang.CharSequence phonenumber, jesg.avro.Address address) {
    this.name = name;
    this.phonenumber = phonenumber;
    this.address = address;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return phonenumber;
    case 2: return address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: phonenumber = (java.lang.CharSequence)value$; break;
    case 2: address = (jesg.avro.Address)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'phonenumber' field.
   */
  public java.lang.CharSequence getPhonenumber() {
    return phonenumber;
  }

  /**
   * Sets the value of the 'phonenumber' field.
   * @param value the value to set.
   */
  public void setPhonenumber(java.lang.CharSequence value) {
    this.phonenumber = value;
  }

  /**
   * Gets the value of the 'address' field.
   */
  public jesg.avro.Address getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(jesg.avro.Address value) {
    this.address = value;
  }

  /** Creates a new Person RecordBuilder */
  public static jesg.avro.Person.Builder newBuilder() {
    return new jesg.avro.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static jesg.avro.Person.Builder newBuilder(jesg.avro.Person.Builder other) {
    return new jesg.avro.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static jesg.avro.Person.Builder newBuilder(jesg.avro.Person other) {
    return new jesg.avro.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence name;
    private java.lang.CharSequence phonenumber;
    private jesg.avro.Address address;

    /** Creates a new Builder */
    private Builder() {
      super(jesg.avro.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(jesg.avro.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phonenumber)) {
        this.phonenumber = data().deepCopy(fields()[1].schema(), other.phonenumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(jesg.avro.Person other) {
            super(jesg.avro.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phonenumber)) {
        this.phonenumber = data().deepCopy(fields()[1].schema(), other.phonenumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.address)) {
        this.address = data().deepCopy(fields()[2].schema(), other.address);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public jesg.avro.Person.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public jesg.avro.Person.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'phonenumber' field */
    public java.lang.CharSequence getPhonenumber() {
      return phonenumber;
    }
    
    /** Sets the value of the 'phonenumber' field */
    public jesg.avro.Person.Builder setPhonenumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.phonenumber = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'phonenumber' field has been set */
    public boolean hasPhonenumber() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'phonenumber' field */
    public jesg.avro.Person.Builder clearPhonenumber() {
      phonenumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'address' field */
    public jesg.avro.Address getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public jesg.avro.Person.Builder setAddress(jesg.avro.Address value) {
      validate(fields()[2], value);
      this.address = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'address' field */
    public jesg.avro.Person.Builder clearAddress() {
      address = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    public Person build() {
      try {
        Person record = new Person();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.phonenumber = fieldSetFlags()[1] ? this.phonenumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.address = fieldSetFlags()[2] ? this.address : (jesg.avro.Address) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
